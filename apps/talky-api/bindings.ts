// My custom header
// This file was generated by [rspc](https://github.com/specta-rs/rspc). Do not edit this file manually.

export type ChannelType = "chat" | "feed" | "multi_media"

export type Edge<T> = { cursor: string; node: T }

export type PageInfo = { has_next_page: boolean; has_prev_page: boolean; start_cursor: string | null; end_cursor: string | null; total_count: number }

export type ProceduresLegacy = { queries: { key: "auth_refresh_token"; input: string; result: { access_token: string; refresh_token: string } } | { key: "channel_create_temporary"; input: { name: string; niche_id: string; type: ChannelType }; result: { id: string; name: string; slug: string; type: ChannelType; is_temporary: boolean; niche_id: string } } | { key: "channel_find_by_slug"; input: string; result: { id: string; name: string; slug: string; type: ChannelType; is_temporary: boolean; niche_id: string } } | { key: "channel_list"; input: { before: string | null; after: string | null; first: number | null; last: number | null; niche_id: string }; result: { page_info: PageInfo; edges: Edge<T>[]; meta: M } } | { key: "channel_list_in"; input: string; result: { id: string; name: string; slug: string; type: ChannelType; is_temporary: boolean; niche_id: string }[] } | { key: "channel_list_users"; input: { before: string | null; after: string | null; first: number | null; last: number | null; niche_id: string }; result: { page_info: PageInfo; edges: Edge<T>[]; meta: M } } | { key: "channel_messages"; input: { before: string | null; after: string | null; first: number | null; last: number | null; channel_id: string }; result: { page_info: PageInfo; edges: Edge<T>[]; meta: M } } | { key: "niche_find_by_slug"; input: string; result: { name: string; slug: string; id: string } } | { key: "niche_list"; input: { before: string | null; after: string | null; first: number | null; last: number | null; niche_id: string }; result: { page_info: PageInfo; edges: Edge<T>[]; meta: M } }; mutations: { key: "auth_login"; input: { username: string; password: string }; result: { access_token: string; refresh_token: string } }; subscriptions: never }

export type Procedures = {
	auth_login: { kind: "mutation", input: { username: string; password: string }, output: { access_token: string; refresh_token: string }, error: unknown },
	auth_refresh_token: { kind: "query", input: string, output: { access_token: string; refresh_token: string }, error: unknown },
	channel_create_temporary: { kind: "query", input: { name: string; niche_id: string; type: ChannelType }, output: { id: string; name: string; slug: string; type: ChannelType; is_temporary: boolean; niche_id: string }, error: unknown },
	channel_find_by_slug: { kind: "query", input: string, output: { id: string; name: string; slug: string; type: ChannelType; is_temporary: boolean; niche_id: string }, error: unknown },
	channel_list: { kind: "query", input: { before: string | null; after: string | null; first: number | null; last: number | null; niche_id: string }, output: { page_info: PageInfo; edges: Edge<T>[]; meta: M }, error: unknown },
	channel_list_in: { kind: "query", input: string, output: { id: string; name: string; slug: string; type: ChannelType; is_temporary: boolean; niche_id: string }[], error: unknown },
	channel_list_users: { kind: "query", input: { before: string | null; after: string | null; first: number | null; last: number | null; niche_id: string }, output: { page_info: PageInfo; edges: Edge<T>[]; meta: M }, error: unknown },
	channel_messages: { kind: "query", input: { before: string | null; after: string | null; first: number | null; last: number | null; channel_id: string }, output: { page_info: PageInfo; edges: Edge<T>[]; meta: M }, error: unknown },
	niche_find_by_slug: { kind: "query", input: string, output: { name: string; slug: string; id: string }, error: unknown },
	niche_list: { kind: "query", input: { before: string | null; after: string | null; first: number | null; last: number | null; niche_id: string }, output: { page_info: PageInfo; edges: Edge<T>[]; meta: M }, error: unknown },
}